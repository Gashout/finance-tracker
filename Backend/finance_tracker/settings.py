"""
Django settings for finance_tracker project.

Generated by 'django-admin startproject' using Django 4.2.24.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-)uy_v3z6d0@a-+=(_&du4uc%dck$6p94*mgt3@ftxxn=*9$wa^')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1,localhost', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third party apps
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "django_filters",
    
    # Local apps
    "accounts",
    "transactions",
    "budgets",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "finance_tracker.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "finance_tracker.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": config('DB_ENGINE', default='django.db.backends.sqlite3'),
        "NAME": config('DB_NAME', default=str(BASE_DIR / "db.sqlite3")),
        "USER": config('DB_USER', default=''),
        "PASSWORD": config('DB_PASSWORD', default=''),
        "HOST": config('DB_HOST', default=''),
        "PORT": config('DB_PORT', default=''),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email settings
# For development, we use the console backend to see emails in the console output
# In production, this should be replaced with an actual SMTP configuration
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST', default='')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@financetracker.com')

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# CORS and CSRF settings
# =====================
#
# Cross-Origin Resource Sharing (CORS) and Cross-Site Request Forgery (CSRF) are two
# security mechanisms that need to be properly configured for a React frontend to
# communicate with a Django backend, especially for operations like password reset.
#
# CORS Settings:
# -------------
# CORS_ALLOW_ALL_ORIGINS (bool): When True, allows requests from any origin.
#   - Security Impact: Very permissive and should NEVER be used in production.
#   - Default: False (recommended for security)
#
# CORS_ALLOWED_ORIGINS (list): Specifies which origins are allowed to make cross-origin requests.
#   - Format: List of complete URLs (scheme + domain + port)
#   - Example: ['http://localhost:3000', 'https://example.com']
#   - Security Impact: Restricts which external domains can access your API
#
# CORS_ALLOW_CREDENTIALS (bool): When True, allows cookies to be included in cross-origin requests.
#   - Required for: Authentication that relies on cookies/sessions
#   - Security Impact: Increases risk if CORS_ALLOWED_ORIGINS is too permissive
#
# Error Handling:
# --------------
# - If CORS is misconfigured, browsers will block requests with a message like:
#   "Access to fetch at 'http://localhost:8000/api/auth/password-reset/' from origin
#    'http://localhost:3000' has been blocked by CORS policy"
# - Common issues include:
#   1. Missing origin in CORS_ALLOWED_ORIGINS
#   2. Incorrect protocol (http vs https)
#   3. Wrong port number
#   4. Middleware order issues (CorsMiddleware must be before CommonMiddleware)

# CORS configuration
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=False, cast=bool)
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS',
    default='http://localhost:3000,http://127.0.0.1:3000',
    cast=lambda v: [s.strip() for s in v.split(',')]
)
CORS_ALLOW_CREDENTIALS = True  # Allow cookies in cross-origin requests (needed for session auth)

# CSRF configuration
# -----------------
# CSRF_TRUSTED_ORIGINS (list): Domains that are trusted for unsafe requests (POST, PUT, DELETE)
#   - Format: List of URI schemes and domain names (no paths)
#   - Example: ['https://example.com', 'http://localhost:3000']
#   - Security Impact: Allows forms/requests from these origins to be processed
#   - Required for: Password reset forms submitted from external domains
#
# Security Note:
# -------------
# Adding domains to CSRF_TRUSTED_ORIGINS is necessary when:
# 1. Your frontend is on a different domain than your backend
# 2. You're making "unsafe" requests (POST, PUT, DELETE)
# 3. You're using cookie-based authentication
#
# Without this setting, Django will reject form submissions from external domains
# as a security measure against CSRF attacks.

CSRF_TRUSTED_ORIGINS = config(
    'CSRF_TRUSTED_ORIGINS',
    default='http://localhost:3000,http://127.0.0.1:3000',
    cast=lambda v: [s.strip() for s in v.split(',')]
)
